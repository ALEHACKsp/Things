#!/usr/bin/env python3
import sys
import getopt

USAGE = '''Usage: fb2enc.py [OPTION]...
Encode or decode standard input to standard output.

    -d, --decode  decode data
    -h, --help    display this help and exit
'''

# Copied from original binary
ENCDATA = {
    'M': [
        0x95, 0x8f, 0x34, 0x69, 0x15, 0xf1, 0x65, 0x5f, 0xba, 0x2a, 0x30, 0x27,
        0xa2, 0x1f, 0x3b, 0xe5, 0x81, 0xf7, 0x1a, 0x45, 0xcd, 0xff, 0x79, 0xb6,
        0xc0, 0x79, 0xe9, 0x83, 0x47, 0x3f, 0xc9, 0xe4, 0xd7, 0x71, 0x11, 0x89,
        0x8e, 0x44, 0x1c, 0x7c, 0xf5, 0x4d, 0xae, 0x07, 0x87, 0x34, 0x6c, 0xa0,
        0xfd, 0x14, 0x5c, 0x17, 0xd3, 0x96, 0x91, 0xa7, 0x93, 0x3e, 0x79, 0x74,
        0xd8, 0xef, 0x28, 0x2b, 0x6c, 0xce, 0xab, 0x5f, 0x91, 0xcd, 0x6e, 0x1e,
        0xc0, 0xc9, 0x9a, 0x1a, 0xc9, 0x14, 0xb4, 0xd3, 0xae, 0x68, 0x68, 0x93,
        0x06, 0x15, 0x5b, 0xeb, 0x26, 0x9f, 0xa6, 0xd9, 0xfd, 0x98, 0x64, 0xea,
        0x8a, 0xc3, 0x41, 0xd2, 0xcf, 0x2c, 0x7c, 0x12, 0x89, 0x50, 0xa0, 0x60,
        0xea, 0x5b, 0x2e, 0xe9, 0xd4, 0xb7, 0x27, 0x9f, 0x34, 0xf5, 0x39, 0xe8,
        0x38, 0x5e, 0x32, 0xb8, 0x50, 0x50, 0x3a, 0xbc, 0x24, 0x1f, 0x71, 0x5b,
        0x23, 0x4b, 0x6c, 0x0c, 0x7d, 0xa5, 0x6b, 0x2a, 0xe3, 0xa5, 0xaa, 0x9f,
        0x8d, 0x26, 0x59, 0x2b, 0x76, 0x3b, 0x0b, 0x3e, 0x0d, 0x9c, 0xf7, 0x2e,
        0x9a, 0x6e, 0xee, 0x0b, 0x93, 0xec, 0xf6, 0x63, 0x3c, 0xb1, 0xdf, 0x2f,
        0x0f, 0x8d, 0x9c, 0x61, 0xd6, 0xe8, 0xb0, 0x87, 0x3d, 0x20, 0x0b, 0x8e,
        0xf8, 0xf0, 0x58, 0x18, 0xba, 0x23, 0x3d, 0x13, 0x6d, 0xfc, 0x67, 0x40,
        0xe8, 0x50, 0x0d, 0x9e, 0x78, 0xea, 0xae, 0x7c, 0x9a, 0xd7, 0x24, 0xba,
        0x86, 0xc9, 0xe4, 0xce, 0xeb, 0xc3, 0x75, 0x61, 0xb2, 0x7f, 0xfe, 0xe7,
        0xd7, 0x16, 0x4d, 0xbd, 0x8c, 0xb5, 0x3b, 0x31, 0xc2, 0x57, 0xa0, 0x5c,
        0xcf, 0x21, 0x2d, 0x12, 0x5f, 0x94, 0x1d, 0x78, 0x2e, 0x91, 0xb3, 0x4c,
        0x84, 0xae, 0x13, 0xff, 0x21, 0x76, 0x1f, 0xf3, 0xdc, 0x19, 0x44, 0x66,
        0x59, 0xab, 0xaf, 0xb3
    ],
    'Mminus': [
        0x87, 0x19, 0x4d, 0x80, 0xfb, 0x09, 0xa8, 0xa9, 0x9e, 0x52, 0x07, 0xd5,
        0xe5, 0xb4, 0x32, 0x35, 0xac, 0xd7, 0x20, 0xf3, 0x71, 0x2c, 0x86, 0x05,
        0x16, 0x29, 0x59, 0x82, 0xab, 0x2a, 0x51, 0x7a, 0x26, 0x24, 0x7d, 0x19,
        0x7f, 0x26, 0xf6, 0xf1, 0x22, 0x21, 0x99, 0xee, 0x69, 0xe4, 0x52, 0x56,
        0x2b, 0x51, 0xa1, 0x68, 0x1a, 0x66, 0xee, 0x8f, 0x86, 0x8e, 0xdd, 0x87,
        0x8d, 0xf1, 0x47, 0xed, 0x99, 0x9f, 0x41, 0x00, 0xe7, 0x85, 0x8b, 0xc8,
        0x4e, 0x35, 0xc5, 0x3e, 0xa7, 0x4f, 0xdd, 0x5c, 0xa4, 0x78, 0x0f, 0x30,
        0x79, 0x5a, 0x3e, 0xa3, 0xe7, 0x76, 0xad, 0x24, 0x7d, 0x5c, 0x7b, 0xa5,
        0x05, 0x6a, 0x81, 0x9c, 0x91, 0xe4, 0x32, 0x63, 0xd1, 0xa4, 0x32, 0x73,
        0xe6, 0x7d, 0x11, 0x4c, 0xd0, 0x43, 0x26, 0x00, 0xf6, 0x5a, 0x36, 0x6b,
        0x73, 0xac, 0x5c, 0x99, 0x66, 0x20, 0x01, 0x15, 0x50, 0x91, 0xd1, 0xb0,
        0x1f, 0xfa, 0x44, 0x5a, 0xf3, 0x5e, 0x70, 0xa1, 0xea, 0xdf, 0xcc, 0x4f,
        0xd1, 0xde, 0x10, 0x4d, 0xbc, 0xdd, 0x7d, 0x5a, 0x70, 0x0a, 0x50, 0x67,
        0x4d, 0x63, 0x8b, 0xb2, 0x89, 0x80, 0xc0, 0x39, 0x18, 0xf3, 0x7d, 0xfc,
        0x8c, 0x5a, 0xfa, 0x84, 0xdc, 0xc2, 0x9a, 0x79, 0x72, 0x37, 0x1b, 0x81,
        0x3d, 0xc4, 0xf4, 0x2a, 0xbf, 0xf2, 0xbc, 0xfe, 0xa6, 0x3b, 0xe8, 0x5e,
        0xed, 0xd1, 0xc0, 0x3a, 0x2f, 0xee, 0x93, 0x06, 0xf4, 0xe6, 0x86, 0xb8,
        0xeb, 0x10, 0x35, 0x51, 0x79, 0xf8, 0x75, 0x9e, 0x11, 0x57, 0xf7, 0xcd,
        0x10, 0x81, 0x7b, 0xff, 0x03, 0x59, 0x0b, 0x62, 0x3a, 0x7d, 0xb5, 0xec,
        0x28, 0x63, 0x8d, 0xe8, 0x73, 0x55, 0x64, 0xcd, 0xbe, 0x54, 0xe2, 0xd9,
        0xd6, 0x73, 0x3e, 0xd8, 0xef, 0x2c, 0x6f, 0x45, 0x87, 0x8e, 0xf8, 0xf0,
        0xb4, 0x9d, 0x29, 0x69
    ],
    'P': [
        0x07, 0x0d, 0x0c, 0x04, 0x0f, 0x0e, 0x0b, 0x08, 0x03, 0x09, 0x0a, 0x05,
        0x00, 0x06, 0x02, 0x01
    ],
    'Pminus': [
        0x0c, 0x0f, 0x0e, 0x08, 0x03, 0x0b, 0x0d, 0x00, 0x07, 0x09, 0x0a, 0x06,
        0x02, 0x01, 0x05, 0x04
    ]
}

def log(str):
    sys.stderr.write('%s: %s\n' % (sys.argv[0], str))

# Notice padding still occur even if (len(blk) % 16) == 0
def padding_pkcs7(blk):
    rmd = 16 - (len(blk) % 16)
    return blk + bytes([rmd] * rmd)

def encrypt_block(blk):
    blk = list(blk)
    buf = [0] * 16
    for i in range(16):
        for l in range(16):
            buf[l] = blk[ENCDATA['P'][l]]
        for j in range(16):
            t = 0
            for k in range(16):
                t += ENCDATA['M'][16 * k + j] * buf[k]
            blk[j] = t & 0xff
    return bytes(blk)

def decrypt_block(blk):
    blk = list(blk)
    buf = [0] * 16
    for i in range(16):
        for j in range(16):
            t = 0
            for k in range(16):
                t += ENCDATA['Mminus'][16 * k + j] * blk[k]
            buf[j] = t & 0xff
        for l in range(16):
            blk[l] = buf[ENCDATA['Pminus'][l]]
    return bytes(blk)


def encrypt(data):
    data = padding_pkcs7(data)
    enc = b''
    for pos in range(0, len(data), 16):
        enc += encrypt_block(data[pos : pos + 16])
    return enc

def decrypt(data):
    if len(data) % 16 != 0:
        log('data corrupt: not padded')
        exit(1)
    dec = b''
    for pos in range(0, len(data) - 16, 16):
        dec += decrypt_block(data[pos : pos + 16])
    lastblk = decrypt_block(data[-16 : ])
    padlen = lastblk[-1]
    if lastblk[-padlen : ] != bytes([padlen] * padlen):
        log('data corrupt: padding error')
        exit(1)
    dec += lastblk[ : 16 - padlen]
    return dec

def usage():
    sys.stderr.write(USAGE)

def main():
    flgEncode = True

    try:
        opts, args = getopt.getopt(sys.argv[1 : ], 'hd', ['help', 'decode'])
    except getopt.GetoptError as e:
        log(e)
        return 1

    for arg in args:
        log('ignoring unknown argument "%s"' % arg)

    for opt, arg in opts:
        if opt in ('-h', '--help'):
            usage()
            return 1
        elif opt in ('-d', '--decode'):
            flgEncode = False

    data = sys.stdin.buffer.read(1024)
    data_next = sys.stdin.buffer.read(1024)
    while data_next:
        for pos in range(0, 1024, 16):
            blk = data[pos : pos + 16]
            sys.stdout.buffer.write(encrypt_block(blk) if flgEncode else decrypt_block(blk))
        data = data_next
        data_next = sys.stdin.buffer.read(1024)
    sys.stdout.buffer.write(encrypt(data) if flgEncode else decrypt(data))

    return 0

if __name__ == '__main__':
    try:
        exit(main())
    except KeyboardInterrupt:
        exit(130)

